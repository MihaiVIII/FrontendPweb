/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressAddDTO,
  AddressDTOPagedResponseRequestResponse,
  AddressDTORequestResponse,
  AddressUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AddressAddDTOFromJSON,
    AddressAddDTOToJSON,
    AddressDTOPagedResponseRequestResponseFromJSON,
    AddressDTOPagedResponseRequestResponseToJSON,
    AddressDTORequestResponseFromJSON,
    AddressDTORequestResponseToJSON,
    AddressUpdateDTOFromJSON,
    AddressUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiAddressFAddPostRequest {
    addressAddDTO?: AddressAddDTO;
}

export interface ApiAddressFDeleteIdDeleteRequest {
    id: string;
}

export interface ApiAddressFGetByIdIdGetRequest {
    id: string;
}

export interface ApiAddressFGetByUserIdGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiAddressFGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiAddressFUpdatePutRequest {
    addressUpdateDTO?: AddressUpdateDTO;
}

/**
 * 
 */
export class AddressFApi extends runtime.BaseAPI {

    /**
     */
    async apiAddressFAddPostRaw(requestParameters: ApiAddressFAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressAddDTOToJSON(requestParameters.addressAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFAddPost(requestParameters: ApiAddressFAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressFAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressFDeleteIdDeleteRaw(requestParameters: ApiAddressFDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAddressFDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFDeleteIdDelete(requestParameters: ApiAddressFDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressFDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressFGetByIdIdGetRaw(requestParameters: ApiAddressFGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAddressFGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFGetByIdIdGet(requestParameters: ApiAddressFGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDTORequestResponse> {
        const response = await this.apiAddressFGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressFGetByUserIdGetRaw(requestParameters: ApiAddressFGetByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/GetByUserId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFGetByUserIdGet(requestParameters: ApiAddressFGetByUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDTOPagedResponseRequestResponse> {
        const response = await this.apiAddressFGetByUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressFGetPageGetRaw(requestParameters: ApiAddressFGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFGetPageGet(requestParameters: ApiAddressFGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDTOPagedResponseRequestResponse> {
        const response = await this.apiAddressFGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressFUpdatePutRaw(requestParameters: ApiAddressFUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/AddressF/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressUpdateDTOToJSON(requestParameters.addressUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressFUpdatePut(requestParameters: ApiAddressFUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressFUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
