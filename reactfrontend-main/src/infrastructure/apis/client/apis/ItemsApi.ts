/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ItemAddDTO,
  ItemAdminAddDTO,
  ItemDTOPagedResponseRequestResponse,
  ItemDTORequestResponse,
  ItemUpdateDTO,
  RequestResponse,
} from '../models';
import {
    ItemAddDTOFromJSON,
    ItemAddDTOToJSON,
    ItemAdminAddDTOFromJSON,
    ItemAdminAddDTOToJSON,
    ItemDTOPagedResponseRequestResponseFromJSON,
    ItemDTOPagedResponseRequestResponseToJSON,
    ItemDTORequestResponseFromJSON,
    ItemDTORequestResponseToJSON,
    ItemUpdateDTOFromJSON,
    ItemUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiItemsAddAdminPostRequest {
    itemAdminAddDTO?: ItemAdminAddDTO;
}

export interface ApiItemsAddPostRequest {
    itemAddDTO?: ItemAddDTO;
}

export interface ApiItemsDeleteIdDeleteRequest {
    id: string;
}

export interface ApiItemsGetByIdIdGetRequest {
    id: string;
}

export interface ApiItemsGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiItemsUpdatePutRequest {
    itemUpdateDTO?: ItemUpdateDTO;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     */
    async apiItemsAddAdminPostRaw(requestParameters: ApiItemsAddAdminPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/AddAdmin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemAdminAddDTOToJSON(requestParameters.itemAdminAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsAddAdminPost(requestParameters: ApiItemsAddAdminPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiItemsAddAdminPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiItemsAddPostRaw(requestParameters: ApiItemsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemAddDTOToJSON(requestParameters.itemAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsAddPost(requestParameters: ApiItemsAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiItemsAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiItemsDeleteIdDeleteRaw(requestParameters: ApiItemsDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiItemsDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsDeleteIdDelete(requestParameters: ApiItemsDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiItemsDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiItemsGetByIdIdGetRaw(requestParameters: ApiItemsGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiItemsGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsGetByIdIdGet(requestParameters: ApiItemsGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDTORequestResponse> {
        const response = await this.apiItemsGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiItemsGetPageGetRaw(requestParameters: ApiItemsGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsGetPageGet(requestParameters: ApiItemsGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDTOPagedResponseRequestResponse> {
        const response = await this.apiItemsGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiItemsUpdatePutRaw(requestParameters: ApiItemsUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Items/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemUpdateDTOToJSON(requestParameters.itemUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiItemsUpdatePut(requestParameters: ApiItemsUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiItemsUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
